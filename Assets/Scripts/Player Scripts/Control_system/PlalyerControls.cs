//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player Scripts/Control_system/PlalyerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlalyerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlalyerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlalyerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerSpaceMovement"",
            ""id"": ""aa3f5814-50ef-4849-9b3a-e7ef51f4b077"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fd784413-3864-4277-add5-d0dc4a6e8cc3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5dd63807-2d51-4d56-817b-a0dd6f44bb15"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""19ce50eb-e33d-44ac-9935-2b26f7fc9e25"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b76587ed-27b2-43ae-b57c-06d2521b630a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e7db995b-fcb4-48ba-9752-b5ec3f6b41f0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a7f5c43d-177e-457a-b667-5b33d2f6afd6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5676fab3-3fb2-4a1f-93b3-cc8e37d7b4fd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""68a47f1b-6930-4f84-b1cd-af1266834245"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerActions"",
            ""id"": ""e79443f9-3cea-4508-9e46-c62ad93535b0"",
            ""actions"": [
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""dfe8d298-39c3-4621-90d8-8be130599d5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4df1c136-1da2-4abd-ba2d-80f2e659f500"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""5f1eaacb-d4e7-496c-8a46-bfe8add4c790"",
            ""actions"": [
                {
                    ""name"": ""Main_attack"",
                    ""type"": ""Button"",
                    ""id"": ""de2abd42-c097-4576-b39f-ebe9b9101df1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary_attack"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1d3c141d-796a-48d6-87dc-1064dfee6d4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd1d5b3a-be35-407d-8c3b-c5eb24a4ac99"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Main_attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""529356bc-af45-4bd7-8300-2e17d5cc7084"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary_attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interactivity"",
            ""id"": ""534d8534-2ae9-4b01-8f69-e0240c0fdcc4"",
            ""actions"": [
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""d180fb22-b365-48e2-88c4-7b66b7d7c4e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""2d3b8cee-5642-46c5-8cbb-866306ea042f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e35b2c5c-ed89-4c58-b307-ca7c08bc01fc"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c5b2eec-ef45-4f41-9e81-1d6aca6c3250"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerSpaceMovement
        m_PlayerSpaceMovement = asset.FindActionMap("PlayerSpaceMovement", throwIfNotFound: true);
        m_PlayerSpaceMovement_Movement = m_PlayerSpaceMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerSpaceMovement_Camera = m_PlayerSpaceMovement.FindAction("Camera", throwIfNotFound: true);
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_Roll = m_PlayerActions.FindAction("Roll", throwIfNotFound: true);
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_Main_attack = m_Combat.FindAction("Main_attack", throwIfNotFound: true);
        m_Combat_Secondary_attack = m_Combat.FindAction("Secondary_attack", throwIfNotFound: true);
        // Interactivity
        m_Interactivity = asset.FindActionMap("Interactivity", throwIfNotFound: true);
        m_Interactivity_Restart = m_Interactivity.FindAction("Restart", throwIfNotFound: true);
        m_Interactivity_Pause = m_Interactivity.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerSpaceMovement
    private readonly InputActionMap m_PlayerSpaceMovement;
    private IPlayerSpaceMovementActions m_PlayerSpaceMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerSpaceMovement_Movement;
    private readonly InputAction m_PlayerSpaceMovement_Camera;
    public struct PlayerSpaceMovementActions
    {
        private @PlalyerControls m_Wrapper;
        public PlayerSpaceMovementActions(@PlalyerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerSpaceMovement_Movement;
        public InputAction @Camera => m_Wrapper.m_PlayerSpaceMovement_Camera;
        public InputActionMap Get() { return m_Wrapper.m_PlayerSpaceMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerSpaceMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerSpaceMovementActions instance)
        {
            if (m_Wrapper.m_PlayerSpaceMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerSpaceMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerSpaceMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerSpaceMovementActionsCallbackInterface.OnMovement;
                @Camera.started -= m_Wrapper.m_PlayerSpaceMovementActionsCallbackInterface.OnCamera;
                @Camera.performed -= m_Wrapper.m_PlayerSpaceMovementActionsCallbackInterface.OnCamera;
                @Camera.canceled -= m_Wrapper.m_PlayerSpaceMovementActionsCallbackInterface.OnCamera;
            }
            m_Wrapper.m_PlayerSpaceMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
            }
        }
    }
    public PlayerSpaceMovementActions @PlayerSpaceMovement => new PlayerSpaceMovementActions(this);

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private IPlayerActionsActions m_PlayerActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerActions_Roll;
    public struct PlayerActionsActions
    {
        private @PlalyerControls m_Wrapper;
        public PlayerActionsActions(@PlalyerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Roll => m_Wrapper.m_PlayerActions_Roll;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterface != null)
            {
                @Roll.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRoll;
            }
            m_Wrapper.m_PlayerActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
            }
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // Combat
    private readonly InputActionMap m_Combat;
    private ICombatActions m_CombatActionsCallbackInterface;
    private readonly InputAction m_Combat_Main_attack;
    private readonly InputAction m_Combat_Secondary_attack;
    public struct CombatActions
    {
        private @PlalyerControls m_Wrapper;
        public CombatActions(@PlalyerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Main_attack => m_Wrapper.m_Combat_Main_attack;
        public InputAction @Secondary_attack => m_Wrapper.m_Combat_Secondary_attack;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void SetCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterface != null)
            {
                @Main_attack.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnMain_attack;
                @Main_attack.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnMain_attack;
                @Main_attack.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnMain_attack;
                @Secondary_attack.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnSecondary_attack;
                @Secondary_attack.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnSecondary_attack;
                @Secondary_attack.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnSecondary_attack;
            }
            m_Wrapper.m_CombatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Main_attack.started += instance.OnMain_attack;
                @Main_attack.performed += instance.OnMain_attack;
                @Main_attack.canceled += instance.OnMain_attack;
                @Secondary_attack.started += instance.OnSecondary_attack;
                @Secondary_attack.performed += instance.OnSecondary_attack;
                @Secondary_attack.canceled += instance.OnSecondary_attack;
            }
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // Interactivity
    private readonly InputActionMap m_Interactivity;
    private IInteractivityActions m_InteractivityActionsCallbackInterface;
    private readonly InputAction m_Interactivity_Restart;
    private readonly InputAction m_Interactivity_Pause;
    public struct InteractivityActions
    {
        private @PlalyerControls m_Wrapper;
        public InteractivityActions(@PlalyerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Restart => m_Wrapper.m_Interactivity_Restart;
        public InputAction @Pause => m_Wrapper.m_Interactivity_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Interactivity; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractivityActions set) { return set.Get(); }
        public void SetCallbacks(IInteractivityActions instance)
        {
            if (m_Wrapper.m_InteractivityActionsCallbackInterface != null)
            {
                @Restart.started -= m_Wrapper.m_InteractivityActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_InteractivityActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_InteractivityActionsCallbackInterface.OnRestart;
                @Pause.started -= m_Wrapper.m_InteractivityActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_InteractivityActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_InteractivityActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_InteractivityActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public InteractivityActions @Interactivity => new InteractivityActions(this);
    public interface IPlayerSpaceMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
    }
    public interface IPlayerActionsActions
    {
        void OnRoll(InputAction.CallbackContext context);
    }
    public interface ICombatActions
    {
        void OnMain_attack(InputAction.CallbackContext context);
        void OnSecondary_attack(InputAction.CallbackContext context);
    }
    public interface IInteractivityActions
    {
        void OnRestart(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
